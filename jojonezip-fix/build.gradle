plugins {
	id 'java'
		id 'war'
    id 'eclipse' // ✅ 바로 이 줄 추가!
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
repositories {
	mavenCentral()
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation 'org.postgresql:postgresql' // PostgreSQL 쓰는 경우
    // JSP 설정
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
implementation 'javax.servlet:javax.servlet-api:4.0.1'

    runtimeOnly 'org.postgresql:postgresql:42.7.3'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    // 또는 (WAR 배포할 경우)
    providedRuntime 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}



bootJar {
	enabled = false
}

war {
    enabled = true

}
tasks.named('test') {
    useJUnitPlatform()
    // 아래 한 줄 추가!
    enabled = false
}

tasks.withType(War) {
    from('src/main/webapp') {
        into ''
    }
}

tasks.named("war") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named("bootWar") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}